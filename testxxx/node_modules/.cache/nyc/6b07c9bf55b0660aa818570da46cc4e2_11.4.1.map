{"version":3,"sources":["testFormatDate.js"],"names":["t","test","to","eql","Date","length","pass"],"mappings":";;AAAA;;;;AACA;;AACA;;;;;;AAEA,mBAAK,YAAL,EAAmBA,KAAK;AACtB;AACA,oBAAO,yCAAyCC,IAAzC,CAA8C,2BAA9C,CAAP,EAAoEC,EAApE,CAAuEC,GAAvE,CAA2E,IAA3E;AACA;AACA,oBAAO,aAAaF,IAAb,CAAkB,0BAAW,QAAX,CAAlB,CAAP,EAAgDC,EAAhD,CAAmDC,GAAnD,CAAuD,IAAvD;AACA,oBAAO,kBAAkBF,IAAlB,CAAuB,0BAAW,UAAX,CAAvB,CAAP,EAAuDC,EAAvD,CAA0DC,GAA1D,CAA8D,IAA9D;AACA,oBAAO,mBAAmBF,IAAnB,CAAwB,0BAAW,WAAX,CAAxB,CAAP,EAAyDC,EAAzD,CAA4DC,GAA5D,CAAgE,IAAhE;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,MAAX,CAAf,CAAP,EAA2CC,EAA3C,CAA8CC,GAA9C,CAAkD,IAAlD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,UAAUF,IAAV,CAAe,0BAAW,IAAX,CAAf,CAAP,EAAyCC,EAAzC,CAA4CC,GAA5C,CAAgD,IAAhD;AACA;AACA,oBAAO,eAAeF,IAAf,CAAoB,0BAAW,QAAX,CAApB,CAAP,EAAkDC,EAAlD,CAAqDC,GAArD,CAAyD,IAAzD;AACA,oBAAO,oBAAoBF,IAApB,CAAyB,0BAAW,UAAX,CAAzB,CAAP,EAAyDC,EAAzD,CAA4DC,GAA5D,CAAgE,IAAhE;AACA,oBAAO,yBAAyBF,IAAzB,CAA8B,0BAAW,YAAX,CAA9B,CAAP,EAAgEC,EAAhE,CAAmEC,GAAnE,CAAuE,IAAvE;AACA,oBAAO,oBAAoBF,IAApB,CAAyB,0BAAW,UAAX,CAAzB,CAAP,EAAyDC,EAAzD,CAA4DC,GAA5D,CAAgE,IAAhE;AACA;AACA,oBAAO,0BAAW,YAAX,EAAyB,WAAzB,CAAP,EAA8CD,EAA9C,CAAiDC,GAAjD,CAAqD,WAArD;AACA,oBAAO,0BAAW,aAAX,EAA0B,WAA1B,CAAP,EAA+CD,EAA/C,CAAkDC,GAAlD,CAAsD,WAAtD;AACA,oBAAO,0BAAW,IAAIC,IAAJ,EAAX,EAAuB,WAAvB,EAAoCC,MAA3C,EAAmDH,EAAnD,CAAsDC,GAAtD,CAA0D,CAA1D;AACAH,IAAEM,IAAF;AACD,CA/BD","file":"testFormatDate.js","sourcesContent":["import test from 'ava'\r\nimport {expect} from 'chai'\r\nimport formatDate from 'formatDate.js'\r\n\r\ntest('formatDate', t => {\r\n  // should return the default formatDate\r\n  expect(/^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}$/.test(formatDate())).to.eql(true)\r\n  // should work with delimiters\r\n  expect(/^\\[\\d{4}\\]/.test(formatDate('[YYYY]'))).to.eql(true)\r\n  expect(/^\\[\\d{4}\\d{2}\\]/.test(formatDate('[YYYYMM]'))).to.eql(true)\r\n  expect(/^\\[\\d{4}:\\d{2}\\]/.test(formatDate('[YYYY:MM]'))).to.eql(true)\r\n  //'should return the year\r\n  expect(/^\\d{4}$/.test(formatDate('YYYY'))).to.eql(true)\r\n  //'should return the month\r\n  expect(/^\\d{2}$/.test(formatDate('MM'))).to.eql(true)\r\n  //'should return the day\r\n  expect(/^\\d{2}$/.test(formatDate('DD'))).to.eql(true)\r\n  //'should return hours\r\n  expect(/^\\d{2}$/.test(formatDate('hh'))).to.eql(true)\r\n  //'should return minutes\r\n  expect(/^\\d{2}$/.test(formatDate('mm'))).to.eql(true)\r\n  //'should return seconds\r\n  expect(/^\\d{2}$/.test(formatDate('ss'))).to.eql(true)\r\n  //'should return miliseconds\r\n  expect(/^\\d{3}$/.test(formatDate('ms'))).to.eql(true)\r\n  // should work with no separators\r\n  expect(/^\\d{4}\\d{2}$/.test(formatDate('YYYYMM'))).to.eql(true)\r\n  expect(/^\\d{4}\\d{2}\\d{2}$/.test(formatDate('YYYYMMDD'))).to.eql(true)\r\n  expect(/^\\d{4}\\d{2}\\d{2}\\d{2}$/.test(formatDate('YYYYMMDDss'))).to.eql(true)\r\n  expect(/^\\d{4}\\d{2}\\d{2}$/.test(formatDate('YYYYMMss'))).to.eql(true)\r\n  // 参数选项\r\n  expect(formatDate('2017-12-06', 'YY年MM月DD日')).to.eql('17年12月06日')\r\n  expect(formatDate(1513310471409, 'YY年MM月DD日')).to.eql('17年12月15日')\r\n  expect(formatDate(new Date(), 'YY年MM月DD日').length).to.eql(9)\r\n  t.pass()\r\n})"]}