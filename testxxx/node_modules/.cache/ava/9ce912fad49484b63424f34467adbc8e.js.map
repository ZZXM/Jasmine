{"version":3,"sources":["randomString.js"],"names":["$s","lowers","uppers","toUpperCase","digits","maps","$","length","d","l","u","resolve","format","keys","split","sort","key","join","reduce","path","name","curr","arr","len","arr1","len1","concat","size","symbols","chars","charl","str","chr","replace","charAt","Math","round","random"],"mappings":";;;;;;kBAAe,CAAC,MAAM;AACpB,QAAMA,KAAK,mCAAX;AACA,QAAMC,SAAS,4BAAf;AACA,QAAMC,SAASD,OAAOE,WAAP,EAAf;AACA,QAAMC,SAAS,YAAf;AACA,MAAIC,OAAO;AACTC,OAAG,CAACN,EAAD,EAAKA,GAAGO,MAAR,CADM;AAETC,OAAG,CAACJ,MAAD,EAASA,OAAOG,MAAhB,CAFM;AAGTE,OAAG,CAACR,MAAD,EAASA,OAAOM,MAAhB,CAHM;AAITG,OAAG,CAACR,MAAD,EAASA,OAAOK,MAAhB;AAJM,GAAX;AAMA,MAAII,UAAWC,MAAD,IAAY;AACxB,QAAIC,OAAO,CAACD,UAAU,KAAX,EAAkBE,KAAlB,CAAwB,EAAxB,EAA4BC,IAA5B,EAAX;AACA,QAAIC,MAAMH,KAAKI,IAAL,CAAU,EAAV,CAAV;AACA,QAAI,CAACZ,KAAKW,GAAL,CAAL,EAAgB;AACdH,WAAKK,MAAL,CAAY,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1B,YAAIC,OAAQ,GAAEF,IAAK,GAAEC,IAAK,EAA1B;AACA,YAAI,CAACf,KAAKgB,IAAL,CAAL,EAAiB;AACf,cAAI,CAACC,GAAD,EAAMC,GAAN,IAAalB,KAAKc,IAAL,CAAjB;AACA,cAAI,CAACK,IAAD,EAAOC,IAAP,IAAepB,KAAKe,IAAL,CAAnB;AACAf,eAAKgB,IAAL,IAAa,CAACC,IAAII,MAAJ,CAAWF,IAAX,CAAD,EAAmBD,MAAME,IAAzB,CAAb;AACD;AACD,eAAOJ,IAAP;AACD,OARD,EAQG,EARH;AASD;AACD,WAAOhB,KAAKW,GAAL,CAAP;AACD,GAfD;AAgBA,SAAO,CAACW,OAAO,CAAR,EAAWf,MAAX,EAAmBgB,OAAnB,KAA+B;AACpC,QAAI,CAACC,KAAD,EAAQC,KAAR,IAAiBnB,QAAQC,MAAR,CAArB;AACA,QAAImB,MAAM,EAAV;AACA,QAAIC,GAAJ;AACA,QAAIJ,OAAJ,EAAa;AACXC,cAAQA,MAAMI,OAAN,CAAcjC,EAAd,EAAkB,EAAlB,IAAwB4B,OAAhC;AACAE,cAAQD,MAAMtB,MAAd;AACD;AACD,WAAOoB,SAAS,CAAhB,EAAmB;AACjBK,YAAMH,MAAMK,MAAN,CAAaC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBP,KAA3B,CAAb,CAAN;AACAC,aAAOC,GAAP;AACD;AACD,WAAOD,GAAP;AACD,GAbD;AAcD,CAzCc,G","file":"randomString.js","sourcesContent":["export default (() => {\r\n  const $s = '`!@#$%^&*()-+=_[]{},./<>?;:\"|\\\\\\''\r\n  const lowers = 'abcdefghijklmnopqrstuvwxyz'\r\n  const uppers = lowers.toUpperCase()\r\n  const digits = '0123456789'\r\n  let maps = {\r\n    $: [$s, $s.length],\r\n    d: [digits, digits.length],\r\n    l: [lowers, lowers.length],\r\n    u: [uppers, uppers.length],\r\n  }\r\n  let resolve = (format) => {\r\n    let keys = (format || 'dlu').split('').sort()\r\n    let key = keys.join('')\r\n    if (!maps[key]) {\r\n      keys.reduce((path, name) => {\r\n        let curr = `${path}${name}`\r\n        if (!maps[curr]) {\r\n          let [arr, len] = maps[path]\r\n          let [arr1, len1] = maps[name]\r\n          maps[curr] = [arr.concat(arr1), len + len1]\r\n        }\r\n        return curr\r\n      }, '')\r\n    }\r\n    return maps[key]\r\n  }\r\n  return (size = 6, format, symbols) => {\r\n    let [chars, charl] = resolve(format)\r\n    let str = ''\r\n    let chr\r\n    if (symbols) {\r\n      chars = chars.replace($s, '') + symbols\r\n      charl = chars.length\r\n    }\r\n    while (size-- > 0) {\r\n      chr = chars.charAt(Math.round(Math.random() * charl))\r\n      str += chr\r\n    }\r\n    return str\r\n  }\r\n})()"]}